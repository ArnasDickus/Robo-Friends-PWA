{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","action.js","constant.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","color","onClick","PureComponent","Header","components_CounterButton","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_CardList","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f25a70ca.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\n\r\nconst Card = ({name,email, id}) => {\r\n     \r\n    return (\r\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src = {`https://robohash.org/${id}?200x200`} alt = \"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n","\r\n\r\nimport React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\n\r\n\r\nconst CardList = ({robots}) => {    \r\n    console.log(\"Cardlist\");\r\n    return (\r\n        <div>\r\n    {\r\n        // user who should return. It can be any variable\r\n        // PROPS - things that come out of state\r\n        // PARENT feeds State into child component >> \r\n                robots.map((user, i) => {\r\n                return (\r\n                <Card \r\n                key = {i} \r\n                id = {robots[i].id} \r\n                name = {robots[i].name} \r\n                email = {robots[i].email} \r\n                />\r\n            );\r\n        })\r\n    }\r\n    </div>\r\n  \r\n    );\r\n  }\r\n\r\nexport default CardList;","\r\nimport React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    console.log(\"Search Box\");\r\n    return (\r\n        <div className = \"pa2\">\r\n            <input \r\n            className = \"pa3 ba b--green bg-lightest-blue\"\r\n            type = \"search\" \r\n            placeholder = 'search robots' onChange = {searchChange}/>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return (\r\n        <div style = {{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n           {props.children} \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","\r\n\r\n\r\n\r\nimport React, { PureComponent } from \"react\";\r\n\r\nclass CounterButton extends PureComponent{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     if(this.state.count !== nextState.count){\r\n    //         return true\r\n    //     }\r\n    //     return false\r\n        \r\n    // }\r\n    updateCount = () => {\r\n        this.setState( state => {\r\n            return {count: this.state.count + 1}\r\n        })\r\n    }\r\n    render(){\r\n        console.log('CounterButton');\r\n        return (\r\n            <button color = {this.props.color} onClick = {this.updateCount}>\r\n            Count: {this.state.count}\r\n            </button>\r\n        );  \r\n    }\r\n}\r\n\r\n\r\nexport default CounterButton;\r\n","\r\n\r\nimport React, { Component } from \"react\";\r\nimport CounterButton from \"./CounterButton\";\r\n\r\n\r\nclass Header extends Component{\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     return false;\r\n    // }\r\n    render(){\r\n        return(\r\n            <div>\r\n             \r\n            <h1 className = \"tc f1\">Robo Friends</h1>\r\n            <CounterButton color = {\"red\"}></CounterButton>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from \"../components/Scroll\";\r\nimport Header from \"../components/Header\";\r\n\r\nimport {setSearchField, requestRobots} from \"../action\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    // prop name can be named anything\r\n   return{\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n   } \r\n}\r\n\r\nclass App extends Component {\r\n    \r\n    // Fetching info with React and updating. With robots.\r\n    componentDidMount(){\r\n      this.props.onRequestRobots();\r\n       \r\n    }\r\n\r\n    render() {\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            // if robot name include searchield text. Return a robot.\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return isPending ?\r\n            <h1>Loading</h1> :\r\n        (\r\n        <div className = \"tc\">\r\n        <Header />\r\n        <SearchBox searchChange = {onSearchChange} />\r\n        <Scroll>\r\n        <CardList robots = {filteredRobots} />\r\n        </Scroll>\r\n    </div>\r\n    );\r\n        \r\n    } \r\n}\r\n// connect is higher order function. Higher order function is a function that\r\n//  returns function\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","\r\nimport {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n    } from \"./constant\";\r\n\r\n// Action typing in search field for robots receive input for text - \r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        // Payload what do you want. After you get sucess get data. After you get error get error\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","\r\n\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n// States for async calls.\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nimport {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n    } from \"./constant\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch , action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n        return Object.assign({}, state, {searchField: action.payload});\r\n        \r\n        default:\r\n        return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n        return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\n// middleware weight if any actions returns function instead of object.\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {searchRobots, requestRobots} from './reducers';\r\nimport 'tachyons';\r\n\r\n// logger is middleware\r\nconst logger = createLogger();\r\n// Root reducer allows you two have multiple reducers. \r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\n// removed logger add it to applyMiddleware if you want logs in console\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, ));\r\n\r\nReactDOM.render(\r\n                <Provider store = {store}>\r\n                <App/>\r\n                </Provider>,document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}